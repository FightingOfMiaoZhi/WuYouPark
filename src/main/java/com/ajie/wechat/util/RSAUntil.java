package com.ajie.wechat.util;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import sun.security.rsa.RSAPrivateKeyImpl;
import sun.security.rsa.RSAPublicKeyImpl;
import sun.security.util.DerValue;

import javax.crypto.Cipher;
import java.security.SecureRandom;

public class RSAUntil {
    public static final String RSA_ALGORITHM = "rsa";

    private static final byte[] PRIVATE_KEY = {48, -126, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 2, 96, 48, -126, 2, 92, 2, 1, 0, 2, -127, -127, 0, -71, -49, -8, -71, 15, -89, 69, -44, -31, 66, 105, 9, -6, -77, 10, -67, 69, -90, -64, -61, -108, 110, -46, 5, 88, 29, -114, 46, 94, 55, 40, -102, 80, -117, -121, -127, -120, -52, -17, -16, -63, -37, -110, -93, -89, -41, -116, 127, -52, -22, 125, 46, -95, 54, 0, -104, 49, 124, -53, -71, 1, -49, -79, 64, 106, 56, -9, 16, -50, -120, 46, 68, -79, 21, -112, -39, 116, 26, 76, -54, 11, 59, 14, -65, 111, -2, -90, -92, -50, 93, 18, 30, 36, 36, -79, -121, 108, 65, 29, 75, 36, -26, -92, 1, 6, -50, -40, -33, 87, 4, -95, -116, -74, 12, 67, 95, -39, 3, -126, -50, -82, -89, 112, 52, 62, 24, -110, 65, 2, 3, 1, 0, 1, 2, -127, -128, 122, 7, -11, 0, -115, 32, 61, 67, 119, 1, 39, 124, -17, 81, -32, -50, -73, 76, -79, -78, -128, -20, 91, 48, 57, 83, -121, -54, 58, 4, 29, -67, 99, 2, -113, -26, -23, -110, 54, 78, -74, -14, 94, -106, -18, -89, 40, 85, -46, -99, 121, -61, 67, 10, -11, 78, -2, -55, 71, -2, 100, 11, 36, 11, -37, -68, -110, 41, -49, 101, -68, -47, -65, 81, -27, 87, 4, 118, -127, -95, 93, 33, 35, -65, -117, -46, 99, -40, 29, -113, 118, -15, 64, 31, -76, -9, 111, 10, 60, -98, -126, 52, -45, 3, -127, -22, -76, 73, -104, -94, 68, 72, 21, -89, 39, -65, -99, -93, -91, 73, -36, -1, -12, 110, -126, -76, -116, -43, 2, 65, 0, -22, 124, -33, -25, 122, -106, 53, 124, -66, 7, -93, 113, -96, -100, 127, -57, 108, 8, 35, 62, -55, -23, 50, -87, 69, 48, -84, 7, -22, 40, -94, -124, 7, 31, 117, -56, -31, 61, -94, 46, 22, 96, 85, -28, 11, 120, -30, 122, -59, -18, 2, -36, 84, -86, 37, -61, -26, -41, -19, -111, 46, 125, -86, 51, 2, 65, 0, -54, -37, -22, -9, -122, 4, 65, 12, -45, 7, 12, 58, 72, -19, -115, -58, 25, 42, -12, -33, 73, 123, -116, -96, -105, 95, -107, 43, -29, 87, -49, 35, -119, 121, 126, 100, -94, 32, -100, 71, -25, 70, -40, 45, 38, 113, -72, 30, -11, 71, -118, 19, -28, 89, -22, -63, -6, 62, 67, 20, -18, 92, -59, -69, 2, 64, 43, 37, 125, 33, -97, -55, -31, -33, -87, 43, -56, -92, 80, -44, 91, 34, -69, -69, 39, -103, 23, 24, 4, -51, 102, -64, -44, -10, -61, -36, 100, 66, -4, -8, -119, -8, -61, -111, 78, -75, 66, 66, -55, -85, 35, 125, 67, -41, 41, 114, 105, 46, 87, -103, -45, 71, 31, -61, -35, -97, -40, 57, 33, 71, 2, 64, 92, 49, 5, -33, -25, -16, 23, 0, 21, 7, -90, -18, -10, 37, -65, -64, -65, -65, 93, -7, -4, 19, 66, 29, -39, -83, 126, -59, -85, 84, 68, -73, 9, -53, 69, 61, -58, -48, -69, 53, -110, 78, 8, 0, -68, -16, 1, -107, 80, 51, 106, -11, 15, 90, 45, -18, 106, 35, -47, -88, -71, -117, 63, -15, 2, 65, 0, -52, 120, -58, -114, -81, -22, 100, -60, -35, -59, -94, 29, -110, 2, 124, 19, 61, 82, -15, -68, 41, 97, -14, -65, -43, -64, 6, -75, -101, 80, 114, 60, -56, -101, -35, 10, 13, -52, 106, -43, -101, -20, 63, -71, -111, 101, -88, 4, 49, 11, 68, 82, 15, 27, -96, 125, -39, -43, 117, 55, 125, 86, 92, 78};
    private static final byte[] PUBLIC_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -71, -49, -8, -71, 15, -89, 69, -44, -31, 66, 105, 9, -6, -77, 10, -67, 69, -90, -64, -61, -108, 110, -46, 5, 88, 29, -114, 46, 94, 55, 40, -102, 80, -117, -121, -127, -120, -52, -17, -16, -63, -37, -110, -93, -89, -41, -116, 127, -52, -22, 125, 46, -95, 54, 0, -104, 49, 124, -53, -71, 1, -49, -79, 64, 106, 56, -9, 16, -50, -120, 46, 68, -79, 21, -112, -39, 116, 26, 76, -54, 11, 59, 14, -65, 111, -2, -90, -92, -50, 93, 18, 30, 36, 36, -79, -121, 108, 65, 29, 75, 36, -26, -92, 1, 6, -50, -40, -33, 87, 4, -95, -116, -74, 12, 67, 95, -39, 3, -126, -50, -82, -89, 112, 52, 62, 24, -110, 65, 2, 3, 1, 0, 1};



    public static String encodingByRSA(String info) throws Exception {
        Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);

        cipher.init(Cipher.ENCRYPT_MODE, RSAPrivateKeyImpl.parseKey(new DerValue(PRIVATE_KEY)), new SecureRandom());
        byte[] cipherData = cipher.doFinal(info.getBytes());
        return new BASE64Encoder().encode(cipherData);

    }

    public static String decodingByRSA(String info) throws Exception{
        Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, RSAPublicKeyImpl.parse(new DerValue(PUBLIC_KEY)),new SecureRandom());
        byte[] cipherData2 = new BASE64Decoder().decodeBuffer(info);
        byte[] plainData = cipher.doFinal(cipherData2);

        return new String(plainData);
    }
}
